(ns rems.layout
  (:require [cognitect.transit]
            [hiccup.page :refer [html5 include-css include-js]]
            [rems.service.public :as public]
            [rems.common.git :as git]
            [rems.config :refer [env]]
            [rems.context :as context]
            [rems.css.style-utils :refer [get-lang theme-logo-get]]
            [rems.text :refer [text with-language]]
            [ring.middleware.anti-forgery :refer [*anti-forgery-token*]]
            [ring.util.http-response]))

(defn- cache-bust [filename]
  (str filename "?" (or (:revision git/+version+)
                        ;; cache busting not strictly needed for dev mode, see rems.handler/dev-js-handler
                        (System/currentTimeMillis))))

(defn- logo-preloads
  "Preload important images so that the paint can happen earlier."
  []
  (for [href (distinct (list (theme-logo-get :logo-name)
                             (theme-logo-get :logo-name-sm)
                             (theme-logo-get :navbar-logo-name)))
        :when href]
    [:link {:rel "preload" :as "image" :href href :type "image/png"}]))

(defn- inline-value [setter value]
  (let [os (java.io.ByteArrayOutputStream. 4096)
        _ (cognitect.transit/write (cognitect.transit/writer os :json) value)
        transit-value (.toString os "UTF-8")]
    [:script {:type "text/javascript"}
     (format "%s(%s);"
             setter
             (pr-str transit-value))]))

(defn- page-template
  [content & [app-content]]
  (let [lang (get-lang)]
    (with-language lang
      (html5 [:html {:lang "en"
                     :theme-default true}
              (into [:head
                     [:meta {:http-equiv "Content-Type" :content "text/html; charset=UTF-8"}]
                     [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
                     [:meta {:name "description" :content (text :t.meta/description)}]
                     [:meta {:name "keywords" :content (text :t.meta/keywords)}]
                     [:link {:rel "icon" :href "/img/favicon.ico" :type "image/x-icon"}]
                     [:link {:rel "shortcut icon" :href "/img/favicon.ico" :type "image/x-icon"}]

                     [:title (text :t.header/title)]
                     (include-css "/assets/bootstrap/css/bootstrap.min.css")
                     (include-css "/assets/font-awesome/css/all.css")
                     (include-css (cache-bust "/css/theme.css")) ; dynamic
                     (include-css (cache-bust (str "/css/" (name lang) "/screen.css"))) ; dynamic
                     (include-css (cache-bust "/css/styles.css"))
                     (for [extra-stylesheet (get-in env [:extra-stylesheets :files])]
                       (include-css (cache-bust extra-stylesheet)))]
                    (logo-preloads))
              [:body
               [:div#app app-content]
               (include-js "/assets/font-awesome/js/fontawesome.js")
               (include-js "/assets/better-dateinput-polyfill/dist/better-dateinput-polyfill.js")
               (include-js "/assets/jquery/jquery.min.js")
               (include-js "/assets/bootstrap/js/bootstrap.min.js")
               (when (:accessibility-report env) (include-js "/assets/axe-core/axe.min.js"))
               (for [extra-script (get-in env [:extra-scripts :files])]
                 (include-js extra-script))
               content]]))))

(defn render
  "renders HTML generated by Hiccup

   params: :status -- status code to return, defaults to 200
           :headers -- map of headers to return, optional
           :content-type -- optional, defaults to \"text/html; charset=utf-8\""
  [content & [params]]
  (let [content-type (:content-type params "text/html; charset=utf-8")
        status (:status params 200)
        ;; we don't want to cache any HTML pages since they contain
        ;; references to cache-busted app.js and screen.css
        headers (merge {"Cache-Control" "no-store"}
                       (:headers params))]
    (ring.util.http-response/content-type
     {:status status
      :headers headers
      :body (page-template content (:app-content params))}
     content-type)))

(defn home-page []
  (render
   (list
    [:script {:type "text/javascript"}
     (format "var csrfToken = '%s';"
             (when (bound? #'*anti-forgery-token*)
               *anti-forgery-token*))]
    (include-js (cache-bust "/js/app.js"))
    [:script {:type "text/javascript"} "rems.spa.init();"]
    (inline-value "rems.app.setIdentity" {:user context/*user* :roles context/*roles*})
    (inline-value "rems.app.setConfig" (public/get-config))
    (inline-value "rems.app.setTranslations" (public/get-translations))
    (inline-value "rems.app.setTheme" (public/get-theme))
    [:script {:type "text/javascript"} "rems.spa.mount();"])))

(defn- error-content
  [error-details]
  [:div.container-fluid
   [:div.row-fluid
    [:div.col-lg-12
     [:div.centering.text-center
      [:div.text-center
       [:h1
        [:span.text-danger (str "Error: " (error-details :status))]
        [:hr]
        (when-let [title (error-details :title)]
          [:h2.without-margin title])
        (when-let [message (error-details :message)]
          [:h3.text-danger message])]]]]]])

(defn error-page
  "error-details should be a map containing the following keys:
   :status - error status
   :title - error title (optional)
   :message - detailed error message (optional)

   returns a response map with the error page as the body
   and the status specified by the status key"
  [error-details]
  (render nil (assoc error-details :app-content (error-content error-details))))
